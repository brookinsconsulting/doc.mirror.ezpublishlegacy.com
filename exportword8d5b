Message-ID: <1837235317.3784.1485855328248.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3783_311964086.1485855328248"

------=_Part_3783_311964086.1485855328248
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Define a View</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Define a View</h1>
    <div class=3D"Section1">
        <div class=3D"contentLayout2">=20
<div class=3D"columnLayout two-right-sidebar" data-layout=3D"two-right-side=
bar">=20
<div class=3D"cell normal" data-type=3D"normal">=20
<div class=3D"innerCell">=20
<h2 id=3D"DefineaView-ViewsinPlatformUI">Views in PlatformUI</h2>
<p>Each route defines a View to render when the route is matched. As explai=
ned in the <a href=3D"https://doc.ez.no/display/DEVELOPER/Backend+interface=
#Backendinterface-Views:mainview,sub-view,side-view" rel=3D"nofollow">Platf=
ormUI technical introduction</a>, this kind of view is called a<strong> Mai=
n View</strong>. Like any view, it can have an arbitrary number of sub-view=
s.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><strong>Good practice:</strong> keep the views small and do not hesitate=
 to create sub-views. This eases the maintenance and allows you to reuse th=
e small sub-views in different context.</p>
</div>
</div>
<p>A View is responsible for generating the User Interface and handling the=
 user input (click, keyboard, drag and drop, etc.). In its lifecycle, a vie=
w first receives a set of parameters, then it is rendered and added to DOM.=
</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>PlatformUI reuses the <a href=3D"http://yuilibrary.com/yui/docs/view/#vi=
ews-models-and-addtarget" class=3D"external-link" rel=3D"nofollow">YUI View=
 system</a>. <code>Y.View</code> is designed to be a very simple component.=
 PlatformUI extends this concept to have views with more features like temp=
lates or asynchronous behavior.</p>
</div>
</div>
<h2 id=3D"DefineaView-CreatingandusingacustomMainView">Creating and using a=
 custom Main View</h2>
<h3 id=3D"DefineaView-CreatinganewView">Creating a new View</h3>
<p>As for the plugin in the previous step, the first thing to do is to decl=
are a new module in the extension bundle <code>yui.yml</code> file:</p>
<br>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>New module in yui.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: text; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">ezconf-listview:
    requires: ['ez-view']
    path: %extending_platformui.public_dir%/js/views/ezconf-listview.js</pr=
e>=20
</div>
</div>
<p>Our basic view will extend the PlatformUI basic view which is available =
in the <code>ez-view</code> module. As a result, <code>ez-view</code> has t=
o be added in the module requirements.</p>
<p>Then we have to create the corresponding module file. In this file, we'l=
l create a new View component by extending <code>Y.eZ.View</code> provided =
by <code>ez-view</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>%extending_platformui.public_dir%/js/views/ezconf-listview.js</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: js; gutter: false; theme: Eclipse" style=3D"font-size:=
12px;">YUI.add('ezconf-listview', function (Y) {
    Y.namespace('eZConf');

    Y.eZConf.ListView =3D Y.Base.create('ezconfListView', Y.eZ.View, [], {
        initializer: function () {
            console.log("Hey, I'm the list view");
        },

        render: function () {
            // this.get('container') is an auto generated &lt;div&gt;
            // here, it's not yet in the DOM of the page and it will be add=
ed
            // after the execution of render().
            this.get('container').setContent(
                "Hey, I'm the listView and I was rendered it seems"
            );
            this.get('container').setStyles({
                background: '#fff',
                fontSize: '200%',
            });
            return this;
        },
    });
});
</pre>=20
</div>
</div>
<p>This code creates the <code>Y.eZConf.ListView</code> by extending <code>=
Y.eZ.View</code>. The newly created view component has a custom <code>rende=
r</code> method. As its name suggests, this method is called when the view =
needs to be rendered. For now, we are directly manipulating the DOM. <code>=
this.get('container')</code> in a View allows you to retrieve the container=
 DOM node, it's actually <a href=3D"http://yuilibrary.com/yui/docs/node/" c=
lass=3D"external-link" rel=3D"nofollow">a Y.Node instance</a> that is autom=
atically created and added to the page when the View is needed in the appli=
cation.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>A View is responsible for handling only what happens in its own containe=
r. While it's technically possible, it is a very bad practice for a View to=
 handle anything that is outside its own container.</p>
</div>
</div>
<p>At this point, if you open/refresh PlatformUI in your browser, nothing w=
ill have really changed, because the newly added View is not used anywhere =
yet.</p>
<h3 id=3D"DefineaView-UsingitasaMainView">Using it as a Main View</h3>
<p>Now that we have a View, it's time to change the route configuration add=
ed in the previous step so that our custom route uses it. To do that, we'll=
 have to change the application plugin to register the new view as a main v=
iew in the application and then to define the custom route with that view. =
Since we want to use the new view in the plugin, the <code>ezconf-listview<=
/code> module becomes a dependency of the plugin module. The plugin module =
declaration becomes:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">ezconf-listapplugin:
    requires: ['ez-pluginregistry', 'plugin', 'base', 'ezconf-listview'] # =
we've added 'ezconf-listview'
    dependencyOf: ['ez-platformuiapp']
    path: %extending_platformui.public_dir%/js/apps/plugins/ezconf-listappp=
lugin.js</pre>=20
</div>
</div>
<p>Then in the plugin, <code>Y.eZConf.ListView</code> becomes available; we=
 can register it as a potential main view and change the route to use it:</=
p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>ezconf-listappplugin.js</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: js; gutter: false; theme: Eclipse" style=3D"font-size:=
12px;">YUI.add('ezconf-listapplugin', function (Y) {
    Y.namespace('eZConf.Plugin');

    Y.eZConf.Plugin.ListAppPlugin =3D Y.Base.create('ezconfListAppPlugin', =
Y.Plugin.Base, [], {
        initializer: function () {
            var app =3D this.get('host'); // the plugged object is called h=
ost

            console.log("Hey, I'm a plugin for PlatformUI App!");
            console.log("And I'm plugged in ", app);

            console.log('Registering the ezconfListView in the app');
            app.views.ezconfListView =3D {
                type: Y.eZConf.ListView,
            };

            console.log("Let's add a route");
            app.route({
                name: "eZConfList",
                path: "/ezconf/list",
                view: "ezconfListView", // because we registered the view i=
n app.views.ezconfListView
                sideViews: {'navigationHub': true, 'discoveryBar': false},
                callbacks: ['open', 'checkUser', 'handleSideViews', 'handle=
MainView'],
            });
        },
    }, {
        NS: 'ezconfTypeApp' // don't forget that
    });

    Y.eZ.PluginRegistry.registerPlugin(
        Y.eZConf.Plugin.ListAppPlugin, ['platformuiApp']
    );
});
</pre>=20
</div>
</div>
<p>After doing that, <code>/ez#/ezconf/list</code> should no longer display=
 the dashboard, but you should see the message generated by <code>Y.eZConf.=
ListView</code>.</p>
<h3 id=3D"DefineaView-Usingatemplate">Using a template</h3>
<p>Manipulating the DOM in a view render method is fine for small changes b=
ut not very handy as soon as you want to generate a more complex UI. It's a=
lso a great way to separate pure UI/markup code from the actual view logic.=
</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>In PlatformUI, most views are using a template to generate their own mar=
kup, those templates are interpreted by <a href=3D"http://yuilibrary.com/yu=
i/docs/handlebars/" class=3D"external-link" rel=3D"nofollow">the Handlebars=
.js template engine embed into YUI</a>.</p>
</div>
</div>
<p>The templates are made available in the application by defining them as =
modules in <code>yui.yml</code>. The template modules are a bit special tho=
ugh. To be recognized as a template and correctly handled by the applicatio=
n, a template module has a <code>type</code> property that should be set to=
 <code>template</code>. Also, to get everything ready <em>automatically</em=
>, the module name should follow a naming convention. The module name shoul=
d consist of the&nbsp;lowercase View internal name (the first <code>Y.Base.=
create</code> parameter) where the template is supposed to be used followed=
 by the suffix <code>-ez-template</code>. In our case, the internal name of=
 <code>Y.eZConf.ListView</code> is <code>ezconfListView</code>, so if we wa=
nt to use a template in this view, the module for this template should be <=
code>ezconflistview-ez-template</code>. The template module must also be ad=
ded as a dependency of the view module using it (<code>ezconf-listview</cod=
e> in this case). As a result, the modules declaration for the template and=
 the view will be:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">ezconf-listview:
    requires: ['ez-templatebasedview', 'ezconflistview-ez-template']
    path: %extending_platformui.public_dir%/js/views/ezconf-listview.js
ezconflistview-ez-template: # internal view name + '-ez-template' suffix
    type: 'template' # mandatory so that the template is available in JavaS=
cript
    path: %extending_platformui.public_dir%/templates/ezconflistview.hbt</p=
re>=20
</div>
</div>
<p>In <code>yui.yml</code>, we also have to change the <code>ezconf-listvie=
w</code> module to now require <span class=3D"blob-code-inner"> <span class=
=3D"pl-s"> <span class=3D"pl-s"> <code>ez-</code> <span class=3D"x x-first =
x-last"> <code>templatebasedview</code> instead of <code>ez-view</code> so =
that&nbsp;<code>Y.eZConf.ListView</code> can inherit from <code>Y.eZ.Templa=
teBasedView</code> instead of <code>Y.eZ.View.</code> </span> </span> </spa=
n> </span> Once that is in place, the rendering logic can be changed to use=
 the template:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: js; gutter: false; theme: Eclipse" style=3D"font-size:=
12px;">YUI.add('ezconf-listview', function (Y) {
    Y.namespace('eZConf');

    Y.eZConf.ListView =3D Y.Base.create('ezconfListView', Y.eZ.TemplateBase=
dView, [], { // Y.eZ.TemplateBasedView now!
        initializer: function () {
            console.log("Hey, I'm the list view");
        },

        render: function () {
            // when extending Y.eZ.TemplateBasedView
            // this.template is the result of the template
            // compilation, it's a function. You can pass an object
            // in parameters and each property will be available in the tem=
plate
            // as a variable named after the property.
            this.get('container').setHTML(
                this.template({
                    "name": "listView"
                })
            );
            this.get('container').setStyles({
                background: '#fff',
                fontSize: '200%',
            });
            return this;
        },
    });
});
</pre>=20
</div>
</div>
<p>And the last part of the chain is the Handlebars template file itself:</=
p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>ezconflistview.hbt</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: xml; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">&lt;h1 class=3D"ezconf-list-title"&gt;List view&lt;/h1&gt;

Hey, I'm the {{ name }} and I'm rendered with the template!
</pre>=20
</div>
</div>
<p>At this point, <code>/ez#/ezconf/list</code> should display the&nbsp;<sp=
an class=3D"blob-code-inner"> <span class=3D"pl-s"> <span class=3D"pl-s"> <=
span class=3D"x x-first x-last"> <code>Y.eZConf.ListView</code> </span> </s=
pan> </span> </span> rendered with the template.</p>
<h3 id=3D"DefineaView-AddingaCSS">Adding a CSS</h3>
<p>We've just moved the markup logic from the view component to a template =
file. It is also time to do the same for the CSS styles that are still in t=
he <code>render</code> method. For that, a CSS file can be created on the d=
isk to replace the inline styles:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>list.css</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: css; gutter: false; theme: Eclipse" style=3D"font-size=
:12px;">.ez-view-ezconflistview {
    background: #fff;
}

.ez-view-ezconflistview .ezconf-list-title {
    margin-top: 0;
}
</pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>By default, a view container element has an auto-generated class built f=
rom the internal view name.</p>
<p><strong>Good practice:</strong> using that auto-generated class to write=
 the CSS rule greatly limits the risk of side effects when styling a view.<=
/p>
</div>
</div>
<p>&nbsp;</p>
<p>Then this file has to be listed in the extension bundle <code>css.yml</c=
ode> configuration file:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>css.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: text; gutter: false; theme: Eclipse" style=3D"font-siz=
e:12px;">system:
    default:
        css:
            files:
                - %extending_platformui.css_dir%/views/list.css
</pre>=20
</div>
</div>
<p>After this is done, a custom view is now used when reaching <code>/ez#/e=
zconf/list</code> and the UI is now styled with a custom external styleshee=
t.</p>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<p class=3D"title">Results and next step:</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<div class=3D"confluence-information-macro-body">
<p>The resulting code can be seen in <a href=3D"https://github.com/ezsystem=
s/ExtendingPlatformUIConferenceBundle/tree/4_view" class=3D"external-link" =
rel=3D"nofollow">the 4_view tag on GitHub</a>, this step result can also be=
 viewed as <a href=3D"https://github.com/ezsystems/ExtendingPlatformUIConfe=
renceBundle/compare/3_routing...4_view" class=3D"external-link" rel=3D"nofo=
llow">a diff between tags <code>3_routing</code> and <code>4_view</code> </=
a>.</p>
<p>The next step is then <a href=3D"/display/DEVELOPER/Configure+the+naviga=
tion">to configure the navigation</a> so that user can easily reach the new=
 page.</p>
</div>
</div>
</div>
</div>=20
</div>=20
<div class=3D"cell aside" data-type=3D"aside">=20
<div class=3D"innerCell">=20
<div class=3D"panel" style=3D"border-width: 1px;">
<div class=3D"panelHeader" style=3D"border-bottom-width: 1px;">
<b>Tutorial path</b>
</div>
<div class=3D"panelContent">=20
<p> </p>
<div class=3D"plugin_pagetree">=20
<ul class=3D"plugin_pagetree_children_list plugin_pagetree_children_list_no=
leftspace">=20
<div class=3D"plugin_pagetree_children">=20
</div>=20
</ul>=20
<fieldset class=3D"hidden">=20
<input type=3D"hidden" name=3D"treeId" value=3D"">=20
<input type=3D"hidden" name=3D"treeRequestId" value=3D"/plugins/pagetree/na=
turalchildren.action?decorator=3Dnone&amp;excerpt=3Dfalse&amp;sort=3Dpositi=
on&amp;reverse=3Dfalse&amp;disableLinks=3Dfalse&amp;expandCurrent=3Dfalse">=
=20
<input type=3D"hidden" name=3D"treePageId" value=3D"">=20
<input type=3D"hidden" name=3D"noRoot" value=3D"false">=20
<input type=3D"hidden" name=3D"rootPageId" value=3D"31430235">=20
<input type=3D"hidden" name=3D"rootPage" value=3D"">=20
<input type=3D"hidden" name=3D"startDepth" value=3D"0">=20
<input type=3D"hidden" name=3D"spaceKey" value=3D"DEVELOPER">=20
<input type=3D"hidden" name=3D"i18n-pagetree.loading" value=3D"Loading...">=
=20
<input type=3D"hidden" name=3D"i18n-pagetree.error.permission" value=3D"Una=
ble to load page tree. It seems that you do not have permission to view the=
 root page.">=20
<input type=3D"hidden" name=3D"i18n-pagetree.eeror.general" value=3D"There =
was a problem retrieving the page tree. Please check the server log file fo=
r more information.">=20
<input type=3D"hidden" name=3D"loginUrl" value=3D"/login.action?os_destinat=
ion=3D%2Fexportword%3FpageId%3D31430243">=20
<input type=3D"hidden" name=3D"mobile" value=3D"false">=20
<fieldset class=3D"hidden">=20
<input type=3D"hidden" name=3D"ancestorId" value=3D"31430235">=20
</fieldset>=20
</fieldset>=20
</div>=20
<p></p>=20
</div>
</div>
</div>=20
</div>=20
</div>=20
</div>
    </div>
</body>
</html>
------=_Part_3783_311964086.1485855328248--
