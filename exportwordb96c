Message-ID: <522700486.3142.1485852188344.JavaMail.confluence@ip-10-127-227-164>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_3141_1034408038.1485852188344"

------=_Part_3141_1034408038.1485852188344
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Alter the JavaScript Application routing</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Alter the JavaScript Application routing</h1>
    <div class=3D"Section1">
        <p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1485852188316 {padding: 0px;}
div.rbtoc1485852188316 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1485852188316 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1485852188316">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#AltertheJavaScriptApplicationrouting-PlatformUIroutingmecha=
nism">PlatformUI routing mechanism</a></li>=20
<li><a href=3D"#AltertheJavaScriptApplicationrouting-Modifyingtheroutingfro=
mthebundlewithaplugin">Modifying the routing from the bundle with a plugin<=
/a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#AltertheJavaScriptApplicationrouting-Declaringthemoduleprov=
idingplugin">Declaring the module providing plugin</a></li>=20
<li><a href=3D"#AltertheJavaScriptApplicationrouting-Modulecreation">Module=
 creation</a></li>=20
<li><a href=3D"#AltertheJavaScriptApplicationrouting-Baseplugincode">Base p=
lugin code</a></li>=20
<li><a href=3D"#AltertheJavaScriptApplicationrouting-Addingaroutetotheappli=
cation">Adding a route to the application</a></li>=20
</ul> </li>=20
</ul>=20
</div>
<p></p>
<h2 id=3D"AltertheJavaScriptApplicationrouting-PlatformUIroutingmechanism">=
PlatformUI routing mechanism</h2>
<p>The essential task of the PlatformUI Application component is to handle =
the routing. It is based on <a href=3D"http://yuilibrary.com/yui/docs/app/#=
hash-based-urls-only" class=3D"external-link" rel=3D"nofollow">the routing =
capabilities provided by the YUI App component</a> and it uses hash-based U=
RIs. By default, the PlatformUI Application will recognize and handle <a hr=
ef=3D"https://github.com/ezsystems/PlatformUIBundle/blob/master/Resources/p=
ublic/js/apps/ez-platformuiapp.js#L720" class=3D"external-link" rel=3D"nofo=
llow">several routes which are declared in the app component itself</a>.</p=
>
<p>A route is described by an object with the following properties:</p>
<ul>
<li><code>path</code>: the path to match</li>
<li><code>view</code>: the identifier of the main view to render when the r=
oute is matched</li>
<li><code>callbacks</code>: a list of <em>middlewares</em> to execute</li>
<li><code>name</code>: an optional name to generate links</li>
<li><code>sideViews</code>: an optional side view configuration</li>
<li><code>service</code>: an optional reference to a view service construct=
or</li>
</ul>
<h2 id=3D"AltertheJavaScriptApplicationrouting-Modifyingtheroutingfromthebu=
ndlewithaplugin">Modifying the routing from the bundle with a plugin</h2>
<p>To tweak any behavior in the application, the way to go is to write a pl=
ugin and in this case a plugin for the Application.</p>
<h3 id=3D"AltertheJavaScriptApplicationrouting-Declaringthemoduleprovidingp=
lugin">Declaring the module providing plugin</h3>
<p>The module has to be declared in the extension bundle's <code>yui.yml</c=
ode> file. It can be done in the following way:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: php; gutter: false; theme: Midnight" style=3D"font-siz=
e:12px;">system:
    default:
        yui:
            modules:
                # use your own prefix, not "ez-"
                ezconf-listapplugin: # module identifier
                    dependencyOf: ['ez-platformuiapp']
                    requires: ['ez-pluginregistry', 'plugin', 'base'] # dep=
ends on the plugin code
                    path: %extending_platformui.public_dir%/js/apps/plugins=
/ezconf-listappplugin.js</pre>=20
</div>
</div>
<p>This configuration means we are declaring a module whose identifier is <=
code>ezconf-listapplugin</code>. It will be added to the dependency list of=
 the module <code>ez-platformuiapp</code> (the one providing the applicatio=
n component). The plugin module requires <code>ez-pluginregistry</code>, <c=
ode>plugin</code> and <code>base.</code> It is stored on the disk in <code>=
%extending_platformui.public_dir%/js/apps/plugins/ezconf-listappplugin.js</=
code>.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p><code>%extending_platformui.public_dir%</code> is a container parameter =
which was added in the previous step. It is here to avoid repeating again a=
nd again the base path to the public directory. Of course, it is also perfe=
ctly possible to write the full path to the module.</p>
</div>
</div>
<h3 id=3D"AltertheJavaScriptApplicationrouting-Modulecreation">Module creat=
ion</h3>
<p>Before creating the actual plugin code, we have to first create the modu=
le in the configured file. The minimal module code is:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>%extending_platformui.public_dir%/js/apps/plugins/ezconf-listappplugin.j=
s</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: js; gutter: false; theme: Midnight" style=3D"font-size=
:12px;">YUI.add('ezconf-listapplugin', function (Y) {
    // module code goes here!
=09// this function will executed when the module loaded in the app,
    // not when the file is loaded by the browser
    // the Y parameter gives access to the YUI env, for instance the compon=
ents
    // defined by others modules.
}); </pre>=20
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-war=
ning">
<span class=3D"aui-icon aui-icon-small aui-iconfont-error confluence-inform=
ation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>The first parameter of <code>YUI.add</code> should be exactly the module=
 identifier used in <code>yui.yml</code> otherwise the module won't be corr=
ectly loaded in the application. If the module code does not seem to be tak=
en into account, it is the very first thing to check.</p>
</div>
</div>
<h3 id=3D"AltertheJavaScriptApplicationrouting-Baseplugincode">Base plugin =
code</h3>
<p>After the module creation, it is time to create the minimal Application =
plugin:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>%extending_platformui.public_dir%/js/apps/plugins/ezconf-listappplugin.j=
s</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: js; gutter: false; theme: Midnight" style=3D"font-size=
:12px;">YUI.add('ezconf-listapplugin', function (Y) {
    // Good practices:
    // * use a custom namespace. 'eZConf' is used as an example here.
    // * put the plugins in a 'Plugin' sub namespace
    Y.namespace('eZConf.Plugin');

    Y.eZConf.Plugin.ListAppPlugin =3D Y.Base.create('ezconfListAppPlugin', =
Y.Plugin.Base, [], {
        initializer: function () {
            var app =3D this.get('host'); // the plugged object is called h=
ost

            console.log("Hey, I'm a plugin for PlatformUI App!");
            console.log("And I'm plugged in ", app);
        },
    }, {
        NS: 'ezconfTypeApp' // don't forget that
    });

    // registering the plugin for the app
    // with that, the plugin is automatically instantiated and plugged in
    // 'platformuiApp' component.
    Y.eZ.PluginRegistry.registerPlugin(
        Y.eZConf.Plugin.ListAppPlugin, ['platformuiApp']
    );
});
</pre>=20
</div>
</div>
<p>The added code creates a plugin class and registers it under <code>Y.eZC=
onf.Plugin.ListAppPlugin</code>, then the PlatformUI plugin registry is con=
figured so that this plugin is automatically instantiated and plugged in th=
e PlatformUI App component.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>The PlatformUI's plugin system comes almost entirely from <a href=3D"htt=
p://yuilibrary.com/yui/docs/plugin/" class=3D"external-link" rel=3D"nofollo=
w">the YUI plugin</a>. While that's not a strict requirement, you should us=
e the <em>Advanced Plugins</em> strategy mentioned in the YUI documentation=
. That's why in this example and in most cases, the plugin will have the <c=
ode>plugin</code> and <code>base</code> YUI plugin as dependencies. <code>b=
ase</code> also provides the low level foundations for most PlatformUI comp=
onent, so reading <a href=3D"http://yuilibrary.com/yui/docs/base/" class=3D=
"external-link" rel=3D"nofollow">the Base YUI documentation</a> will also h=
elp understanding several concepts used all over the application.</p>
</div>
</div>
<p>At this point, if you open PlatformUI in your favorite browser with the =
console open, you should see the result of the <code>console.log</code> cal=
ls in the above code.</p>
<h3 id=3D"AltertheJavaScriptApplicationrouting-Addingaroutetotheapplication=
">Adding a route to the application</h3>
<p>Finally, the plugin is ready to add a new route to the application. As w=
ritten in the previous code sample, the plugged object, the application her=
e, is available through <code>this.get('host')</code> in the plugin. The Ap=
p object provides <a href=3D"http://yuilibrary.com/yui/docs/api/classes/App=
.html#method_route" class=3D"external-link" rel=3D"nofollow">a <code>route<=
/code> method</a> allowing to add route.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>%extending_platformui.public_dir%/js/apps/plugins/ezconf-listappplugin.j=
s</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"brush: js; gutter: false; theme: Midnight" style=3D"font-size=
:12px;">YUI.add('ezconf-listapplugin', function (Y) {
    Y.namespace('eZConf.Plugin');

    Y.eZConf.Plugin.ListAppPlugin =3D Y.Base.create('ezconfListAppPlugin', =
Y.Plugin.Base, [], {
        initializer: function () {
            var app =3D this.get('host'); // the plugged object is called h=
ost

            app.route({
                name: "eZConfList",
                path: "/ezconf/list",
                view: "dashboardView", // let's display the dashboard since=
 we don't have a custom view... yet :)
                // we want the navigationHub (top menu) but not the discove=
ryBar
                // (left bar), we can try different options
                sideViews: {'navigationHub': true, 'discoveryBar': false},
                callbacks: ['open', 'checkUser', 'handleSideViews', 'handle=
MainView'],
            });
        },
    }, {
        NS: 'ezconfTypeApp' // don't forget that
    });

    Y.eZ.PluginRegistry.registerPlugin(
        Y.eZConf.Plugin.ListAppPlugin, ['platformuiApp']
    );
});
</pre>=20
</div>
</div>
<p>Now, if you refresh your browser, you still need not see any visible cha=
nge but the application should recognize the&nbsp;<code>/ezconf/list</code>=
 hash URI. Going to <code>/ez#/ezconf/list</code> should display the same t=
hing as <code>/ez#/dashboard</code>.</p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>The PlatformUI Application component extends the YUI App component, as a=
 result <a href=3D"http://yuilibrary.com/yui/docs/api/classes/App.html" cla=
ss=3D"external-link" rel=3D"nofollow">the complete API of this component</a=
> can be used.</p>
</div>
</div>
<div class=3D"confluence-information-macro confluence-information-macro-tip=
">
<p class=3D"title">Results and next step:</p>
<span class=3D"aui-icon aui-icon-small aui-iconfont-approve confluence-info=
rmation-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
<p>The resulting code can be seen in <a href=3D"https://github.com/ezsystem=
s/ExtendingPlatformUIConferenceBundle/tree/3_routing" class=3D"external-lin=
k" rel=3D"nofollow">the 3_routing tag on GitHub</a>, this step result can a=
lso be viewed as <a href=3D"https://github.com/ezsystems/ExtendingPlatformU=
IConferenceBundle/compare/2_configuration...3_routing" class=3D"external-li=
nk" rel=3D"nofollow">a diff between tags <code>2_configuration</code> and <=
code>3_routing</code></a>.</p>
<p>The next step is then <a href=3D"/display/TECHDOC/Define+a+View">to defi=
ne a new view and to use it when the newly added route is matched</a>.</p>
</div>
</div>
    </div>
</body>
</html>
------=_Part_3141_1034408038.1485852188344--
