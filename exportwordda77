Message-ID: <1006745188.1066.1413885877164.JavaMail.confluence@ip-10-127-227-192>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_1065_1262842127.1413885877163"

------=_Part_1065_1262842127.1413885877163
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>RouteReference</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

#main {
    padding-bottom: 1em !important; /* The default padding of 6em is too mu=
ch for printouts */
}

body {
    font-family: Arial, Helvetica, FreeSans, sans-serif;
    font-size: 10pt;
    line-height: 1.2;
}

body, #full-height-container, #main, #page, #content, .has-personal-sidebar=
 #content {
    background: #fff    !important;
    color: #000         !important;
    border: 0           !important;
    width: 100%         !important;
    height: auto        !important;
    min-height: auto    !important;
    margin: 0           !important;
    padding: 0          !important;
    display: block      !important;
}

a, a:link, a:visited, a:focus, a:hover, a:active {
    color: #000;
}
#content h1,
#content h2,
#content h3,
#content h4,
#content h5,
#content h6 {
    font-family: Arial, Helvetica, FreeSans, sans-serif;
    page-break-after: avoid;
}
pre {
    font-family: Monaco, "Courier New", monospace;
}

#header,
.aui-header-inner,
#navigation,
#sidebar,
.sidebar,
#personal-info-sidebar,
.ia-fixed-sidebar,
.page-actions,
.navmenu,
.ajs-menu-bar,
.noprint,
.inline-control-link,
.inline-control-link a,
a.show-labels-editor,
.global-comment-actions,
.comment-actions,
.quick-comment-container,
#addcomment {
    display: none !important;
}

.comment .date::before {
    content: none !important; /* remove middot for print view */
}

h1.pagetitle img {
    height: auto;
    width: auto;
}

.print-only {
    display: block;
}
#footer {
    position: relative !important; /* CONF-17506 Place the footer at end of=
 the content */
    margin: 0;
    padding: 0;
    background: none;
    clear: both;
}

#poweredby {
    border-top: none;
    background: none;
}

#poweredby li.print-only {
    display: list-item;
    font-style: italic;
}

#poweredby li.noprint {
    display:none;
}


/* no width controls in print */
.wiki-content .table-wrap,
.wiki-content p,
.panel .codeContent,
.panel .codeContent pre,
.image-wrap {
    overflow: visible !important;
}

/* TODO - should this work? */
#children-section,
#comments-section .comment,
#comments-section .comment .comment-body,
#comments-section .comment .comment-content,
#comments-section .comment p {
    page-break-inside: avoid;
}

#page-children a {
    text-decoration: none;
}

/**
 hide twixies

 the specificity here is a hack because print styles
 are getting loaded before the base styles. */
#comments-section.pageSection .section-header,
#comments-section.pageSection .section-title,
#children-section.pageSection .section-header,
#children-section.pageSection .section-title,
.children-show-hide {
    padding-left: 0;
    margin-left: 0;
}

.children-show-hide.icon {
    display: none;
}

/* personal sidebar */
.has-personal-sidebar #content {
    margin-right: 0px;
}

.has-personal-sidebar #content .pageSection {
    margin-right: 0px;
}
-->
    </style>
</head>
<body>
    <h1>RouteReference</h1>
    <div class=3D"Section1">
        <div class=3D"aui-message warning shadowed information-macro">=20
<p class=3D"title">Version compatibility</p>=20
<span class=3D"aui-icon icon-warning">Icon</span>=20
<div class=3D"message-content">=20
<p>Route references are compatible with&nbsp;<strong>eZ Publish 5.3 / 2014.=
05</strong></p>=20
</div>=20
</div>=20
<p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1413885877136 {padding: 0px;}
div.rbtoc1413885877136 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1413885877136 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1413885877136">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#RouteReference-Description">Description</a></li>=20
<li><a href=3D"#RouteReference-Solution">Solution</a></li>=20
<li><a href=3D"#RouteReference-Usage">Usage</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#RouteReference-Twig">Twig</a></li>=20
<li><a href=3D"#RouteReference-PHP">PHP</a></li>=20
</ul> </li>=20
<li><a href=3D"#RouteReference-ExtendingtheRouteReferencegenerationprocess"=
>Extending the RouteReference generation process</a></li>=20
</ul>=20
</div>
<p></p>
<h2 id=3D"RouteReference-Description">Description</h2>
<p>Sometimes, when generating links to a resource, you need to modify the d=
efault router's behavior.</p>
<p>Use cases can be:</p>
<ul>
<li><a href=3D"/display/EZP/Language+Switcher">Language switch links</a></l=
i>
<li>Download links</li>
<li>Pass a Content object instead of a Location (and use its&nbsp;<code>mai=
nLocationId</code>)</li>
</ul>
<h2 id=3D"RouteReference-Solution">Solution</h2>
<p>The concept of&nbsp;<strong>RouteReference</strong>&nbsp;has been introd=
uced, which works in the same way of <a href=3D"http://api.symfony.com/2.3/=
Symfony/Component/HttpKernel/Controller/ControllerReference.html" class=3D"=
external-link" rel=3D"nofollow">Symfony's&nbsp;<code>ControllerReference</c=
ode></a>&nbsp;for sub-requests. A&nbsp;<code>RouteReference</code>&nbsp;rep=
resents a route (to a location object, a declared route...) with its parame=
ters and can be passed to the&nbsp;<code>Router</code>&nbsp;for link genera=
tion.</p>
<p>The advantage of a&nbsp;<code>RouteReference</code>&nbsp;is that its par=
ams can be modified later, and then passed to the router (e.g. to generate =
a link to the same location in several different languages).</p>
<p>Furthermore, the&nbsp;<code>RouteReference</code>&nbsp;generation proces=
s can be extended to fit specific needs.</p>
<h2 id=3D"RouteReference-Usage">Usage</h2>
<h3 id=3D"RouteReference-Twig">Twig</h3>
<p><strong>Prototype:</strong></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">ez_route( [routing_resource[, parameters_hash]] )</pre>=20
</div>
</div>
<ul>
<li><code>routing_resource</code>&nbsp;can be any valid resource (route nam=
e, Location object...). If omitted (<code>null</code>), the current route w=
ill be taken into account.</li>
<li><code>parameters_hash</code>&nbsp;is a hash with arbitrary key/values. =
It will be passed to the router in the end.</li>
</ul>
<p><strong><br /></strong></p>
<p><strong>Minimal usage is pretty straightforward:</strong></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: xml; gutter: false" style=3D"font-size=
:12px;">{# With a declared route. #}
{% set routeRef =3D ez_route( &quot;my_route&quot; ) %}

{# With a location, given &quot;location&quot; variable is a valid Location=
 object. #}
{% set routeRef =3D ez_route( location ) %}

{# Then pass the routeRef variable to path() to generate the link #}
&lt;a href=3D&quot;{{ path( routeRef ) }}&quot;&gt;My link&lt;/a&gt;</pre>=
=20
</div>
</div>
<p>&nbsp;</p>
<p><strong>Passing parameters and play with the RouteReference:</strong></p=
>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: xml; gutter: false" style=3D"font-size=
:12px;">{% set routeRef =3D ez_route( &quot;my_route&quot;, {&quot;some&quo=
t;: &quot;thing&quot;} ) %}

{# You can then add parameters further on #}
{% do routeRef.set( &quot;foo&quot;, [&quot;bar&quot;, &quot;baz&quot;] ) %=
}

{# Or even modify the route resource #}
{% do routeRef.setRoute( &quot;another_route&quot; ) %}

&lt;a href=3D&quot;{{ path( routeRef ) }}&quot;&gt;My link&lt;/a&gt;</pre>=
=20
</div>
</div>
<h3 id=3D"RouteReference-PHP">PHP</h3>
<p><span>You can easily generate links based on a&nbsp;</span><code>RouteRe=
ference</code><span>&nbsp;from PHP too, with the&nbsp;</span><code>RouteRef=
erenceGenerator</code><span>&nbsp;service:</span></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">// Assuming we're in a controller
/** @var \eZ\Publish\Core\MVC\Symfony\Routing\Generator\RouteReferenceGener=
atorInterface $routeRefGenerator */
$routeRefGenerator =3D $this-&gt;get( 'ezpublish.route_reference.generator'=
 );
$routeRef =3D $routeRefGenerator-&gt;generate( 'my_route', array( 'some' =
=3D&gt; 'thing' );
$routeRef-&gt;set( 'foo', array( 'bar', 'baz' ) );
$routeRef-&gt;setRoute( 'another_route' );

$link =3D $this-&gt;generateUrl( $routeRef );</pre>=20
</div>
</div>
<h2 id=3D"RouteReference-ExtendingtheRouteReferencegenerationprocess"><span=
>Extending the RouteReference generation process</span></h2>
<p>When generating the route reference, the&nbsp;<code>RouteReferenceGenera=
tor</code>&nbsp;service fires an&nbsp;<code>MVCEvents::ROUTE_REFERENCE_GENE=
RATION&nbsp;</code>(<em>ezpublish.routing.reference_generation</em>) event.=
 This event can be listened to in order to modify the final route reference=
 (adding/changing parameters, changing the route name...).</p>
<p>All listeners receive a&nbsp;<code>eZ\Publish\Core\MVC\Symfony\Event\Rou=
teReferenceGenerationEvent</code>&nbsp;object, which contains the current r=
equest object and the route reference.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">namespace Acme\AcmeTestBundle\EventListener;

use eZ\Publish\Core\MVC\Symfony\Event\RouteReferenceGenerationEvent;
use eZ\Publish\Core\MVC\Symfony\MVCEvents;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class MyRouteReferenceListener implements EventSubscriberInterface
{
    public static function getSubscribedEvents()
    {
        return array(
            MVCEvents::ROUTE_REFERENCE_GENERATION =3D&gt; 'onRouteReference=
Generation'
        );
    }

    public function onRouteReferenceGeneration( RouteReferenceGenerationEve=
nt $event )
    {
        $routeReference =3D $event-&gt;getRouteReference();
        $request =3D $event-&gt;getRequest();

        // Let's say we want to change the route name if &quot;some_paramet=
er&quot; param is present
        if ( $routeReference-&gt;has( 'some_parameter' )
        {
            $routeReference-&gt;setRoute( 'a_specific_route' );
            // We remove &quot;some_parameter&quot;, as we don't need it an=
y more
            $routeReference-&gt;remove( 'some_parameter' );
            // We add another parameter, just because it's fun :-)
            $routeReference-&gt;set( 'another_parameter', array( 'parameter=
s', 'are', 'fun' );
        }
    }
}</pre>=20
</div>
</div>
<p><span><strong><br /></strong></span></p>
<p><span><strong>Service declaration:</strong></span></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;"># AcmeTestBundle/Resources/config/services.yml
parameters:
    acme.my_route_reference_listener.class: Acme\AcmeTestBundle\EventListen=
er\MyRouteReferenceListener

services:
    acme.my_route_reference_listener:
        class: %acme.my_route_reference_listener.class%
        tags:
            - { name: kernel.event_subscriber }</pre>=20
</div>
</div>=20
<div class=3D"aui-message hint shadowed information-macro">=20
<span class=3D"aui-icon icon-hint">Icon</span>=20
<div class=3D"message-content">=20
<p>A&nbsp;<em>real life</em>&nbsp;implementation example can be the <a href=
=3D"/display/EZP/Language+Switcher">LanguageSwitcher</a> (<code><a href=3D"=
https://github.com/ezsystems/ezpublish-kernel/blob/master/eZ/Publish/Core/M=
VC/Symfony/EventListener/LanguageSwitchListener.php" class=3D"external-link=
" rel=3D"nofollow">eZ\Publish\Core\MVC\Symfony\EventListener\LanguageSwitch=
Listener</a></code>).</p>=20
</div>=20
</div>=20
<p>&nbsp;</p>
<p>&nbsp;</p>
    </div>
</body>
</html>
------=_Part_1065_1262842127.1413885877163--
