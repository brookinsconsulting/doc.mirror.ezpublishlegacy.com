Message-ID: <954022976.966.1413884475772.JavaMail.confluence@ip-10-127-227-192>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_965_1175697689.1413884475772"

------=_Part_965_1175697689.1413884475772
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Context aware HTTP cache</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

#main {
    padding-bottom: 1em !important; /* The default padding of 6em is too mu=
ch for printouts */
}

body {
    font-family: Arial, Helvetica, FreeSans, sans-serif;
    font-size: 10pt;
    line-height: 1.2;
}

body, #full-height-container, #main, #page, #content, .has-personal-sidebar=
 #content {
    background: #fff    !important;
    color: #000         !important;
    border: 0           !important;
    width: 100%         !important;
    height: auto        !important;
    min-height: auto    !important;
    margin: 0           !important;
    padding: 0          !important;
    display: block      !important;
}

a, a:link, a:visited, a:focus, a:hover, a:active {
    color: #000;
}
#content h1,
#content h2,
#content h3,
#content h4,
#content h5,
#content h6 {
    font-family: Arial, Helvetica, FreeSans, sans-serif;
    page-break-after: avoid;
}
pre {
    font-family: Monaco, "Courier New", monospace;
}

#header,
.aui-header-inner,
#navigation,
#sidebar,
.sidebar,
#personal-info-sidebar,
.ia-fixed-sidebar,
.page-actions,
.navmenu,
.ajs-menu-bar,
.noprint,
.inline-control-link,
.inline-control-link a,
a.show-labels-editor,
.global-comment-actions,
.comment-actions,
.quick-comment-container,
#addcomment {
    display: none !important;
}

.comment .date::before {
    content: none !important; /* remove middot for print view */
}

h1.pagetitle img {
    height: auto;
    width: auto;
}

.print-only {
    display: block;
}
#footer {
    position: relative !important; /* CONF-17506 Place the footer at end of=
 the content */
    margin: 0;
    padding: 0;
    background: none;
    clear: both;
}

#poweredby {
    border-top: none;
    background: none;
}

#poweredby li.print-only {
    display: list-item;
    font-style: italic;
}

#poweredby li.noprint {
    display:none;
}


/* no width controls in print */
.wiki-content .table-wrap,
.wiki-content p,
.panel .codeContent,
.panel .codeContent pre,
.image-wrap {
    overflow: visible !important;
}

/* TODO - should this work? */
#children-section,
#comments-section .comment,
#comments-section .comment .comment-body,
#comments-section .comment .comment-content,
#comments-section .comment p {
    page-break-inside: avoid;
}

#page-children a {
    text-decoration: none;
}

/**
 hide twixies

 the specificity here is a hack because print styles
 are getting loaded before the base styles. */
#comments-section.pageSection .section-header,
#comments-section.pageSection .section-title,
#children-section.pageSection .section-header,
#children-section.pageSection .section-title,
.children-show-hide {
    padding-left: 0;
    margin-left: 0;
}

.children-show-hide.icon {
    display: none;
}

/* personal sidebar */
.has-personal-sidebar #content {
    margin-right: 0px;
}

.has-personal-sidebar #content .pageSection {
    margin-right: 0px;
}
-->
    </style>
</head>
<body>
    <h1>Context aware HTTP cache</h1>
    <div class=3D"Section1">
        <div class=3D"aui-message warning shadowed information-macro">=20
<p class=3D"title">Version compatibility</p>=20
<span class=3D"aui-icon icon-warning">Icon</span>=20
<div class=3D"message-content">=20
<p>This feature is available as of <strong>eZ Publish 5.2 / 2013.07</strong=
></p>=20
</div>=20
</div>=20
<p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1413884475745 {padding: 0px;}
div.rbtoc1413884475745 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1413884475745 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1413884475745">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ContextawareHTTPcache-Usecase">Use case</a></li>=20
<li><a href=3D"#ContextawareHTTPcache-Credits">Credits</a></li>=20
<li><a href=3D"#ContextawareHTTPcache-Feature">Feature</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#ContextawareHTTPcache-Workflow">Workflow</a></li>=20
<li><a href=3D"#ContextawareHTTPcache-Varnish">Varnish</a></li>=20
</ul> </li>=20
</ul>=20
</div>
<p></p>
<h2 id=3D"ContextawareHTTPcache-Usecase">Use case</h2>
<p>Being based on Symfony 2, eZ Publish 5 uses HTTP cache from version 5.0 =
<a href=3D"/display/EZP/Context+aware+HTTP+cache">extended with content awa=
reness</a>. However this cache management is only available for anonymous u=
sers due to HTTP restrictions.</p>
<p>It is of course possible to make HTTP cache vary thanks to the&nbsp;<cod=
e>Vary</code>&nbsp;response header, but this header can only be based on on=
e of the request headers (e.g.&nbsp;<code>Accept-Encoding</code>). Thus, to=
 make the cache vary on a specific context (e.g. a hash based on a user rol=
es and limitations), this context must be present in the original request.<=
/p>
<h2 id=3D"ContextawareHTTPcache-Credits">Credits</h2>
<p>This feature is based on&nbsp;<a href=3D"http://asm89.github.io/2012/09/=
26/context-aware-http-caching.html" style=3D"text-decoration: none;" class=
=3D"external-link" rel=3D"nofollow">Context aware HTTP caching post</a>&nbs=
p;by&nbsp;<a href=3D"https://github.com/asm89" style=3D"text-decoration: no=
ne;" class=3D"external-link" rel=3D"nofollow">asm89</a>.</p>
<h2 id=3D"ContextawareHTTPcache-Feature"><a class=3D"external-link" href=3D=
"https://github.com/ezsystems/ezpublish-kernel/blob/master/doc/specificatio=
ns/cache/context_aware_http_cache.md#solution" name=3D"solution" style=3D"t=
ext-decoration: none;" rel=3D"nofollow"></a>Feature</h2>
<p>As the response can vary on a request header, the base solution is to ma=
ke the kernel do a sub-request in order to retrieve the context (aka&nbsp;<=
strong>user hash</strong>). Once the&nbsp;<em>user hash</em>&nbsp;has been =
retrieved, it's injected in the original request in the&nbsp;<code>X-User-H=
ash</code>&nbsp;custom header, making it possible to&nbsp;<em>vary</em>&nbs=
p;the HTTP response on this header:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">&lt;?php
use Symfony\Component\HttpFoundation\Response;

// ...

// Inside a controller action
$response =3D new Response();
$response-&gt;setVary( 'X-User-Hash' );</pre>=20
</div>
</div>
<p>This solution is implemented in Symfony reverse proxy (aka&nbsp;<em>Http=
Cache</em>) and is also accessible to dedicated reverse proxies like Varnis=
h.</p>
<h3 id=3D"ContextawareHTTPcache-Workflow"><a class=3D"external-link" href=
=3D"https://github.com/ezsystems/ezpublish-kernel/blob/master/doc/specifica=
tions/cache/context_aware_http_cache.md#workflow" name=3D"workflow" style=
=3D"text-decoration: none;" rel=3D"nofollow"></a>Workflow</h3>
<ol>
<li>Reverse proxy receives the HTTP request (without the user hash).</li>
<li><p>Reverse proxy does a sub-request (emulated in the case of&nbsp;<em>H=
ttpCache</em>).</p><p>Sub-request&nbsp;<strong>must</strong>&nbsp;have the =
following headers:</p>
<ul>
<li><code style=3D"margin-left: 2.0px;">X-HTTP-Override: AUTHENTICATE</code=
></li>
<li><code style=3D"margin-left: 2.0px;">Accept: application/vnd.ez.UserHash=
+text</code></li>
<li>Original cookie (mainly to keep trace of the sessionId)</li>
</ul></li>
<li><p>eZ Publish returns an HTTP response containing the user hash in&nbsp=
;<code>X-User-Hash</code>&nbsp;header.</p></li>
<li><p>Reverse proxy adds the&nbsp;<code>X-User-Hash</code>&nbsp;header to =
the original request.</p></li>
</ol>=20
<div class=3D"aui-message hint shadowed information-macro">=20
<p class=3D"title">Note on performance</p>=20
<span class=3D"aui-icon icon-hint">Icon</span>=20
<div class=3D"message-content">=20
<p>User hash is <strong>not</strong> generated for each <code>AUTHENTICATE<=
/code> request. It is cached using the <code>Cookie</code> header string as=
 key. <br /><strong>Hence each user has its own hash, generated once per se=
ssion.</strong></p>
<p>Hash generation being based by default on roles and limitations, <strong=
>a user can share the same hash with another one</strong> if their profile =
are similar. This is precisely what offers the possibility to <em>share HTT=
P cache</em> between several logged-in users.</p>=20
</div>=20
</div>=20
<div class=3D"aui-message success shadowed information-macro">=20
<p class=3D"title">Tip</p>=20
<span class=3D"aui-icon icon-success">Icon</span>=20
<div class=3D"message-content">=20
<p>You can customize user hash generation. Read <a href=3D"/display/EZP/Con=
text+aware+HTTP+cache">Context aware HTTP cache</a> in the developer cookbo=
ok to learn more about this.</p>=20
</div>=20
</div>=20
<h3 id=3D"ContextawareHTTPcache-Varnish"><span style=3D"color: rgb(0,0,0);"=
>Varnish</span></h3>
<p>Described behavior comes out of the box with Symfony reverse proxy, but =
it's of course possible ot use Varnish to achieve the same.</p>
<p>This can be done thanks to&nbsp;<a href=3D"https://github.com/varnish/li=
bvmod-curl" style=3D"text-decoration: none;" class=3D"external-link" rel=3D=
"nofollow">Varnish Curl vmod</a>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: perl; gutter: false" style=3D"font-siz=
e:12px;">import curl;

sub vcl_recv {
    # Do a standard lookup on assets
    # Note that file extension list below is not extensive, so consider com=
pleting it to fit your needs.
    if (req.request =3D=3D &quot;GET&quot; &amp;&amp; req.url ~ &quot;\.(cs=
s|js|gif|jpe?g|bmp|png|tiff?|ico|img|tga|wmf|svg|swf|ico|mp3|mp4|m4a|ogg|mo=
v|avi|wmv|zip|gz|pdf|ttf|eot|wof)$&quot;) {
        return (lookup);
    }

    if (req.request =3D=3D &quot;GET&quot;) {
        # Pre-authenticate request to get shared cache, even when authentic=
ated
        if (req.http.Cookie !~ &quot;eZSESSID&quot; ) {
            # User don't have session cookie =3D&gt; Set a hardcoded anonym=
ous hash
            set req.http.X-User-Hash =3D &quot;38015b703d82206ebc01d17a39c7=
27e5&quot;;
        } else {
            # User is authenticated =3D&gt; fetch user hash
            curl.header_add(&quot;X-HTTP-Override: AUTHENTICATE&quot;);
            curl.header_add(&quot;Accept: application/vnd.ez.UserHash+text&=
quot;);
            curl.header_add(&quot;Cookie: &quot; + req.http.Cookie);
            # Customize with real backend host
            # E.g. curl.get(&quot;http://www.metalfrance.net&quot;);
            curl.get(&quot;http://&lt;host_of_your_backend&gt;/&quot;);
            if (curl.status() =3D=3D 200) {
                set req.http.X-User-Hash =3D curl.header(&quot;X-User-Hash&=
quot;);
            }
        }
    }

    # If it passes all these tests, do a lookup anyway;
    return (lookup);
}</pre>=20
</div>
</div>=20
<div class=3D"aui-message success shadowed information-macro">=20
<p class=3D"title">Securing hash generation request</p>=20
<span class=3D"aui-icon icon-success">Icon</span>=20
<div class=3D"message-content">=20
<p>By default, hash generation requests are granted for localhost (<code>12=
7.0.0.1</code>,&nbsp;<code>::1</code>,&nbsp;<code>fe80::1</code>).</p>
<p>If you want to enlarge the scope (e.g. if your Varnish server is not run=
ning on the same machine), you can override&nbsp;<code>canGenerateUserHash(=
)</code>&nbsp;protected method in your main kernel class (mostly&nbsp;<code=
>EzPublishKernel</code>).</p>=20
</div>=20
</div>
    </div>
</body>
</html>
------=_Part_965_1175697689.1413884475772--
