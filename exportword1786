Message-ID: <684519231.986.1413884661613.JavaMail.confluence@ip-10-127-227-192>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_985_633667872.1413884661613"

------=_Part_985_633667872.1413884661613
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>How to expose SiteAccess aware configuration for your bundle</ti=
tle>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

#main {
    padding-bottom: 1em !important; /* The default padding of 6em is too mu=
ch for printouts */
}

body {
    font-family: Arial, Helvetica, FreeSans, sans-serif;
    font-size: 10pt;
    line-height: 1.2;
}

body, #full-height-container, #main, #page, #content, .has-personal-sidebar=
 #content {
    background: #fff    !important;
    color: #000         !important;
    border: 0           !important;
    width: 100%         !important;
    height: auto        !important;
    min-height: auto    !important;
    margin: 0           !important;
    padding: 0          !important;
    display: block      !important;
}

a, a:link, a:visited, a:focus, a:hover, a:active {
    color: #000;
}
#content h1,
#content h2,
#content h3,
#content h4,
#content h5,
#content h6 {
    font-family: Arial, Helvetica, FreeSans, sans-serif;
    page-break-after: avoid;
}
pre {
    font-family: Monaco, "Courier New", monospace;
}

#header,
.aui-header-inner,
#navigation,
#sidebar,
.sidebar,
#personal-info-sidebar,
.ia-fixed-sidebar,
.page-actions,
.navmenu,
.ajs-menu-bar,
.noprint,
.inline-control-link,
.inline-control-link a,
a.show-labels-editor,
.global-comment-actions,
.comment-actions,
.quick-comment-container,
#addcomment {
    display: none !important;
}

.comment .date::before {
    content: none !important; /* remove middot for print view */
}

h1.pagetitle img {
    height: auto;
    width: auto;
}

.print-only {
    display: block;
}
#footer {
    position: relative !important; /* CONF-17506 Place the footer at end of=
 the content */
    margin: 0;
    padding: 0;
    background: none;
    clear: both;
}

#poweredby {
    border-top: none;
    background: none;
}

#poweredby li.print-only {
    display: list-item;
    font-style: italic;
}

#poweredby li.noprint {
    display:none;
}


/* no width controls in print */
.wiki-content .table-wrap,
.wiki-content p,
.panel .codeContent,
.panel .codeContent pre,
.image-wrap {
    overflow: visible !important;
}

/* TODO - should this work? */
#children-section,
#comments-section .comment,
#comments-section .comment .comment-body,
#comments-section .comment .comment-content,
#comments-section .comment p {
    page-break-inside: avoid;
}

#page-children a {
    text-decoration: none;
}

/**
 hide twixies

 the specificity here is a hack because print styles
 are getting loaded before the base styles. */
#comments-section.pageSection .section-header,
#comments-section.pageSection .section-title,
#children-section.pageSection .section-header,
#children-section.pageSection .section-title,
.children-show-hide {
    padding-left: 0;
    margin-left: 0;
}

.children-show-hide.icon {
    display: none;
}

/* personal sidebar */
.has-personal-sidebar #content {
    margin-right: 0px;
}

.has-personal-sidebar #content .pageSection {
    margin-right: 0px;
}
-->
    </style>
</head>
<body>
    <h1>How to expose SiteAccess aware configuration for your bundle</h1>
    <div class=3D"Section1">
        <div class=3D"aui-message warning shadowed information-macro">=20
<p class=3D"title">Version compatibility</p>=20
<span class=3D"aui-icon icon-warning">Icon</span>=20
<div class=3D"message-content">=20
<p>This recipe is compatible with <strong>eZ Publish 5.4 / 2014.07</strong>=
</p>=20
</div>=20
</div>=20
<p><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1413884661569 {padding: 0px;}
div.rbtoc1413884661569 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1413884661569 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1413884661569">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#HowtoexposeSiteAccessawareconfigurationforyourbundle-Descri=
ption">Description</a></li>=20
<li><a href=3D"#HowtoexposeSiteAccessawareconfigurationforyourbundle-Semant=
icconfigurationparsing">Semantic configuration parsing</a></li>=20
<li><a href=3D"#HowtoexposeSiteAccessawareconfigurationforyourbundle-Mappin=
gtointernalsettings">Mapping to internal settings</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#HowtoexposeSiteAccessawareconfigurationforyourbundle-Mergin=
ghashvaluesbetweenscopes">Merging hash values between scopes</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#HowtoexposeSiteAccessawareconfigurationforyourbundle-Mergef=
romsecondlevel">Merge from&nbsp;second level</a></li>=20
<li><a href=3D"#HowtoexposeSiteAccessawareconfigurationforyourbundle-Limita=
tions">Limitations</a></li>=20
</ul> </li>=20
</ul> </li>=20
<li><a href=3D"#HowtoexposeSiteAccessawareconfigurationforyourbundle-Dedica=
tedmapperobject">Dedicated mapper object</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#HowtoexposeSiteAccessawareconfigurationforyourbundle-Mergin=
ghashvaluesbetweenscopes.1">Merging hash values between scopes</a></li>=20
</ul> </li>=20
</ul>=20
</div>
<p></p>
<h2 id=3D"HowtoexposeSiteAccessawareconfigurationforyourbundle-Description"=
>Description</h2>
<p>Symfony Config component makes it possible to define&nbsp;<em>semantic c=
onfiguration</em>, exposed to the end-developer. This configuration is vali=
dated by rules you define, e.g. validating type (string, array, integer, bo=
olean...). Usually, once validated and processed this semantic configuratio=
n is then mapped to internal&nbsp;<em>key/value</em>&nbsp;parameters stored=
 in the&nbsp;<code>ServiceContainer</code>.</p>
<p>eZ Publish uses this for its core configuration, but adds another config=
uration level, the&nbsp;<strong>SiteAccess</strong>. For each defined SiteA=
ccess, we need to be able to use the same configuration tree in order to de=
fine SiteAccess specific config. These settings then need to be mapped to S=
iteAccess aware internal parameters, that one can retrieve via the&nbsp;<co=
de>ConfigResolver</code>. For this, internal keys need to follow the format=
&nbsp;<code>&lt;namespace&gt;.&lt;scope&gt;.&lt;parameter_name&gt;</code>,&=
nbsp;<code>namespace</code>&nbsp;being specific to your app/bundle,&nbsp;<c=
ode>scope</code>&nbsp;being the SiteAccess, SiteAccess group,&nbsp;<code>de=
fault</code>&nbsp;or&nbsp;<code>global</code>,&nbsp;<code>parameter_name</c=
ode>&nbsp;being the actual setting&nbsp;<em>identifier</em>.</p>=20
<div class=3D"aui-message hint shadowed information-macro">=20
<span class=3D"aui-icon icon-hint">Icon</span>=20
<div class=3D"message-content">=20
<p><span style=3D"color: rgb(0,0,0);">For more information on ConfigResolve=
r, namespaces and scopes, see&nbsp;</span><a href=3D"/display/EZP/Configura=
tion">eZ Publish configuration basics</a><span style=3D"color: rgb(119,119,=
119);">.</span></p>=20
</div>=20
</div>=20
<p><span>Goal of this feature is to make it easy to implement a&nbsp;</span=
><em>SiteAccess aware</em><span>&nbsp;semantic configuration and its mappin=
g to internal config for any eZ bundle developer.</span></p>
<h2 id=3D"HowtoexposeSiteAccessawareconfigurationforyourbundle-Semanticconf=
igurationparsing">Semantic configuration parsing</h2>
<p><span><span>An abstract&nbsp;</span><code>Configuration</code><span>&nbs=
p;class has been added, simplifying the way to add a SiteAccess settings tr=
ee like the following:</span></span></p>
<p>&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>ezpublish.yml or config.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: bash; gutter: false" style=3D"font-siz=
e:12px;">acme_demo:
    system:
        my_siteaccess:
            hello: &quot;world&quot;
            foo_setting:
                an_integer: 456
                enabled: true

        my_siteaccess_group:
            hello: &quot;universe&quot;
            foo_setting:
                foo: &quot;bar&quot;
                some: &quot;thing&quot;
                an_integer: 123
                enabled: false</pre>=20
</div>
</div>
<p>&nbsp;</p>
<p><span>Class FQN is&nbsp;</span><code>eZ\Bundle\EzPublishCoreBundle\Depen=
dencyInjection\Configuration\SiteAccessAware\Configuration</code><span>.<br=
 /></span><span style=3D"line-height: 1.4285715;">All you have to do is to =
extend it and use&nbsp;</span><code style=3D"line-height: 1.4285715;">$this=
-&gt;generateScopeBaseNode()</code><span style=3D"line-height: 1.4285715;">=
:</span></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">namespace Acme\DemoBundle\DependencyInjection;

use eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\SiteAcc=
essAware\Configuration as SiteAccessConfiguration;
use Symfony\Component\Config\Definition\Builder\NodeBuilder;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;

class Configuration extends SiteAccessConfiguration
{
    public function getConfigTreeBuilder()
    {
        $treeBuilder =3D new TreeBuilder();
        $rootNode =3D $treeBuilder-&gt;root( 'acme_demo' );

        // $systemNode will then be the root of siteaccess aware settings.
        $systemNode =3D $this-&gt;generateScopeBaseNode( $rootNode );
        $systemNode
            -&gt;scalarNode( 'hello' )-&gt;isRequired()-&gt;end()
            -&gt;arrayNode( 'foo_setting' )
                -&gt;children()
                    -&gt;scalarNode( &quot;foo&quot; )-&gt;end()
                    -&gt;scalarNode( &quot;some&quot; )-&gt;end()
                    -&gt;integerNode( &quot;an_integer&quot; )-&gt;end()
                    -&gt;booleanNode( &quot;enabled&quot; )-&gt;end()
                -&gt;end()
            -&gt;end();

        return $treeBuilder;
    }
}</pre>=20
</div>
</div>=20
<div class=3D"aui-message hint shadowed information-macro">=20
<span class=3D"aui-icon icon-hint">Icon</span>=20
<div class=3D"message-content">=20
<p><span style=3D"color: rgb(0,0,0);">Default name for the&nbsp;<em>SiteAcc=
ess root node</em>&nbsp;is&nbsp;<code>system</code>, but you can customize =
it. For this, just pass the name you want to use as a 2nd argument of&nbsp;=
<code>$this-&gt;generateScopeBaseNode()</code>.</span></p>=20
</div>=20
</div>=20
<h2 id=3D"HowtoexposeSiteAccessawareconfigurationforyourbundle-Mappingtoint=
ernalsettings">Mapping to internal settings</h2>
<p>Semantic configuration must always be&nbsp;<em>mapped</em>&nbsp;to inter=
nal&nbsp;<em>key/value</em>&nbsp;settings within the&nbsp;<code>ServiceCont=
ainer</code>. This is usually done in the DIC extension.</p>
<p>For SiteAccess aware settings, new&nbsp;<code>ConfigurationProcessor</co=
de>&nbsp;and&nbsp;<code>Contextualizer</code>&nbsp;classes have been introd=
uced to ease the process.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">namespace Acme\DemoBundle\DependencyInjection;

use eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\SiteAcc=
essAware\ConfigurationProcessor;
use eZ\Bundle\EzPublishCoreBundle\DependencyInjection\Configuration\SiteAcc=
essAware\ContextualizerInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\Config\FileLocator;
use Symfony\Component\HttpKernel\DependencyInjection\Extension;
use Symfony\Component\DependencyInjection\Loader;

/**
 * This is the class that loads and manages your bundle configuration
 *
 * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles=
/extension.html}
 */
class AcmeDemoExtension extends Extension
{
    public function load( array $configs, ContainerBuilder $container )
    {
        $configuration =3D $this-&gt;getConfiguration( $configs, $container=
 );
        $config =3D $this-&gt;processConfiguration( $configuration, $config=
s );

        $loader =3D new Loader\YamlFileLoader( $container, new FileLocator(=
 __DIR__.'/../Resources/config' ) );
        $loader-&gt;load( 'default_settings.yml' );

        // &quot;acme_demo&quot; will be the namespace as used in ConfigRes=
olver format.
        $processor =3D new ConfigurationProcessor( $container, 'acme_demo' =
);
        $processor-&gt;mapConfig(
            $config,
            // Any kind of callable can be used here.
            // It will be called for each declared scope/SiteAccess.
            function ( $scopeSettings, $currentScope, ContextualizerInterfa=
ce $contextualizer )
            {
                // Will map &quot;hello&quot; setting to &quot;acme_demo.&l=
t;$currentScope&gt;.hello&quot; container parameter
                // It will then be possible to retrieve this parameter thro=
ugh ConfigResolver in the application code:
                // $helloSetting =3D $configResolver-&gt;getParameter( 'hel=
lo', 'acme_demo' );
                $contextualizer-&gt;setContextualParameter( 'hello', $curre=
ntScope, $scopeSettings['hello'] );
            }
        );

        // Now map &quot;foo_setting&quot; and ensure keys defined for &quo=
t;my_siteaccess&quot; overrides the one for &quot;my_siteaccess_group&quot;
        // It is done outside the closure as it is needed only once.
        $processor-&gt;mapConfigArray( 'foo_setting', $config );
    }
}</pre>=20
</div>
</div>=20
<div class=3D"aui-message success shadowed information-macro">=20
<p class=3D"title">Tip</p>=20
<span class=3D"aui-icon icon-success">Icon</span>=20
<div class=3D"message-content">=20
<p>You can map simple settings by calling <code>$processor-&gt;mapSetting()=
</code>, without having to call <code>$processor-&gt;mapConfig()</code> wit=
h a callable.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">$processor =3D new ConfigurationProcessor( $container, 'acme_demo' =
);
$processor-&gt;mapSetting( 'hello', $config );</pre>=20
</div>
</div>=20
</div>=20
</div>=20
<div class=3D"aui-message problem shadowed information-macro">=20
<span class=3D"aui-icon icon-problem">Icon</span>=20
<div class=3D"message-content">=20
<p><strong>Important:</strong> Always ensure you have defined and loaded de=
fault settings.</p>=20
</div>=20
</div>=20
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>@AcmeDemoBundle/Resources/config/default_settings.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: bash; gutter: false" style=3D"font-siz=
e:12px;">parameters:
    acme_demo.default.hello: world
    acme_demo.default.foo_setting:
        foo: ~
        some: ~
        planets: [Earth]
        an_integer: 0
        enabled: false
        j_adore: les_sushis</pre>=20
</div>
</div>
<h3 id=3D"HowtoexposeSiteAccessawareconfigurationforyourbundle-Merginghashv=
aluesbetweenscopes">Merging hash values between scopes</h3>
<p>When you define a hash as semantic config, you sometimes don't want the =
SiteAccess settings to replace the default or group values, but&nbsp;<em>en=
rich</em>&nbsp;them by appending new entries. This is made possible by usin=
g&nbsp;<code>$processor-&gt;mapConfigArray()</code>, which needs to be call=
ed outside the closure (before or after), in order to be called only once.<=
/p>
<p><span>Consider the following default config:</span></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>default_settings.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: bash; gutter: false" style=3D"font-siz=
e:12px;">parameters:
    acme_demo.default.foo_setting:
        foo: ~
        some: ~
        planets: [Earth]
        an_integer: 0
        enabled: false
        j_adore: les_sushis</pre>=20
</div>
</div>
<p><span><span><br /></span></span></p>
<p><span><span>And then this semantic config:</span></span></p>
<p>&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>ezpublish.yml or config.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: bash; gutter: false" style=3D"font-siz=
e:12px;">acme_demo:
    system:
        sa_group:
            foo_setting:
                foo: bar
                some: thing
                an_integer: 123

        # Assuming &quot;sa1&quot; is part of &quot;sa_group&quot;
        sa1:
            foo_setting:
                an_integer: 456
                enabled: true
                j_adore: le_saucisson</pre>=20
</div>
</div>
<p><span><br /></span></p>
<p><span>What we want here, is that keys defined for&nbsp;</span><code>foo_=
setting</code><span>&nbsp;are merged between default/group/SiteAccess:</spa=
n></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Expected result</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: bash; gutter: false" style=3D"font-siz=
e:12px;">parameters:
    acme_demo.sa1.foo_setting:
        foo: bar
        some: thing
        planets: [Earth]
        an_integer: 456
        enabled: true
        j_adore: le_saucisson</pre>=20
</div>
</div>
<h4 id=3D"HowtoexposeSiteAccessawareconfigurationforyourbundle-Mergefromsec=
ondlevel">Merge from&nbsp;<em>second level</em></h4>
<p>In the example above, entries were merged in respect to the scope order =
of precedence. However, if we define the&nbsp;<code>planets</code>&nbsp;key=
 for<code>sa1</code>, it will completely override the default value since t=
he merge process is done at only 1 level.</p>
<p>You can add another level by passing&nbsp;<code>ContextualizerInterface:=
:MERGE_FROM_SECOND_LEVEL</code>&nbsp;as an option (3rd argument) to<code>$c=
ontextualizer-&gt;mapConfigArray()</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>default_settings.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: bash; gutter: false" style=3D"font-siz=
e:12px;">parameters:
    acme_demo.default.foo_setting:
        foo: ~
        some: ~
        planets: [Earth]
        an_integer: 0
        enabled: false
        j_adore: [les_sushis]</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Semantic config (ezpublish.yml / config.yml)</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: bash; gutter: false" style=3D"font-siz=
e:12px;">acme_demo:
    system:
        sa_group:
            foo_setting:
                foo: bar
                some: thing
                planets: [Mars, Venus]
                an_integer: 123

        # Assuming &quot;sa1&quot; is part of &quot;sa_group&quot;
        sa1:
            foo_setting:
                an_integer: 456
                enabled: true
                j_adore: [le_saucisson, la_truite_a_la_vapeur]</pre>=20
</div>
</div>
<p>Result using&nbsp;<code>ContextualizerInterface::MERGE_FROM_SECOND_LEVEL=
</code>&nbsp;option:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: bash; gutter: false" style=3D"font-siz=
e:12px;">parameters:
    acme_demo.sa1.foo_setting:
        foo: bar
        some: thing
        planets: [Earth, Mars, Venus]
        an_integer: 456
        enabled: true
        j_adore: [les_suhis, le_saucisson, la_truite_a_la_vapeur]</pre>=20
</div>
</div>=20
<div class=3D"aui-message hint shadowed information-macro">=20
<span class=3D"aui-icon icon-hint">Icon</span>=20
<div class=3D"message-content">=20
<p>There is also another option, <code>ContextualizerInterface::UNIQUE</cod=
e>, to be used when you want to ensure your array setting has unique values=
. It will only work on normal arrays though, not hashes.</p>=20
</div>=20
</div>=20
<h4 id=3D"HowtoexposeSiteAccessawareconfigurationforyourbundle-Limitations"=
>Limitations</h4>
<p>A few limitation exist with this scope hash merge:</p>
<ul class=3D"task-list">
<li>Semantic setting name and internal name will be the same (like&nbsp;<co=
de>foo_setting</code>&nbsp;in the examples above).</li>
<li>Applicable to 1st level semantic parameter only (i.e. settings right un=
der the SiteAccess name).</li>
<li>Merge is not recursive. Only 2nd level merge is possible by using&nbsp;=
<code>ContextualizerInterface::MERGE_FROM_SECOND_LEVEL</code>&nbsp;option.<=
/li>
</ul>
<h2 id=3D"HowtoexposeSiteAccessawareconfigurationforyourbundle-Dedicatedmap=
perobject">Dedicated mapper object</h2>
<p><span>Instead of passing a callable to&nbsp;<code>$processor-&gt;mapConf=
ig()</code>, an instance of&nbsp;<code>eZ\Bundle\EzPublishCoreBundle\Depend=
encyInjection\Configuration\SiteAccessAware\ConfigurationMapperInterface</c=
ode>&nbsp;can be passed.</span></p>
<p><span>This can be useful if you have a lot of configuration to map and d=
on't want to pollute your DIC extension class (better for maintenance).</sp=
an></p>
<h3 id=3D"HowtoexposeSiteAccessawareconfigurationforyourbundle-Merginghashv=
aluesbetweenscopes.1">Merging hash values between scopes</h3>
<p><span><span>As specified above,&nbsp;</span><code>$contextualizer-&gt;ma=
pConfigArray()</code><span>&nbsp;is not to be used within the&nbsp;</span><=
em>scope loop</em><span>, like for simple values. When using a closure/call=
able, you usually call it before or after&nbsp;</span><code>$processor-&gt;=
mapConfig()</code><span>. For mapper objects, a dedicated interface can be =
used:&nbsp;</span><code>HookableConfigurationMapperInterface</code><span>, =
which defines 2 methods:&nbsp;</span><code>preMap()</code><span>&nbsp;and&n=
bsp;</span><code>postMap()</code><span>.</span></span></p>
<p><span><br /></span></p>
<p>&nbsp;</p>
    </div>
</body>
</html>
------=_Part_985_633667872.1413884661613--
