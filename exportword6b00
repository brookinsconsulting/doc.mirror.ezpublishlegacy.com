Message-ID: <563688653.988.1413884666772.JavaMail.confluence@ip-10-127-227-192>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_987_1587231841.1413884666772"

------=_Part_987_1587231841.1413884666772
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>How to implement a Custom Tag for XMLText FieldType</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

#main {
    padding-bottom: 1em !important; /* The default padding of 6em is too mu=
ch for printouts */
}

body {
    font-family: Arial, Helvetica, FreeSans, sans-serif;
    font-size: 10pt;
    line-height: 1.2;
}

body, #full-height-container, #main, #page, #content, .has-personal-sidebar=
 #content {
    background: #fff    !important;
    color: #000         !important;
    border: 0           !important;
    width: 100%         !important;
    height: auto        !important;
    min-height: auto    !important;
    margin: 0           !important;
    padding: 0          !important;
    display: block      !important;
}

a, a:link, a:visited, a:focus, a:hover, a:active {
    color: #000;
}
#content h1,
#content h2,
#content h3,
#content h4,
#content h5,
#content h6 {
    font-family: Arial, Helvetica, FreeSans, sans-serif;
    page-break-after: avoid;
}
pre {
    font-family: Monaco, "Courier New", monospace;
}

#header,
.aui-header-inner,
#navigation,
#sidebar,
.sidebar,
#personal-info-sidebar,
.ia-fixed-sidebar,
.page-actions,
.navmenu,
.ajs-menu-bar,
.noprint,
.inline-control-link,
.inline-control-link a,
a.show-labels-editor,
.global-comment-actions,
.comment-actions,
.quick-comment-container,
#addcomment {
    display: none !important;
}

.comment .date::before {
    content: none !important; /* remove middot for print view */
}

h1.pagetitle img {
    height: auto;
    width: auto;
}

.print-only {
    display: block;
}
#footer {
    position: relative !important; /* CONF-17506 Place the footer at end of=
 the content */
    margin: 0;
    padding: 0;
    background: none;
    clear: both;
}

#poweredby {
    border-top: none;
    background: none;
}

#poweredby li.print-only {
    display: list-item;
    font-style: italic;
}

#poweredby li.noprint {
    display:none;
}


/* no width controls in print */
.wiki-content .table-wrap,
.wiki-content p,
.panel .codeContent,
.panel .codeContent pre,
.image-wrap {
    overflow: visible !important;
}

/* TODO - should this work? */
#children-section,
#comments-section .comment,
#comments-section .comment .comment-body,
#comments-section .comment .comment-content,
#comments-section .comment p {
    page-break-inside: avoid;
}

#page-children a {
    text-decoration: none;
}

/**
 hide twixies

 the specificity here is a hack because print styles
 are getting loaded before the base styles. */
#comments-section.pageSection .section-header,
#comments-section.pageSection .section-title,
#children-section.pageSection .section-header,
#children-section.pageSection .section-title,
.children-show-hide {
    padding-left: 0;
    margin-left: 0;
}

.children-show-hide.icon {
    display: none;
}

/* personal sidebar */
.has-personal-sidebar #content {
    margin-right: 0px;
}

.has-personal-sidebar #content .pageSection {
    margin-right: 0px;
}
-->
    </style>
</head>
<body>
    <h1>How to implement a Custom Tag for XMLText FieldType</h1>
    <div class=3D"Section1">
        <div class=3D"aui-message warning shadowed information-macro">=20
<p class=3D"title">Version compatibility</p>=20
<span class=3D"aui-icon icon-warning">Icon</span>=20
<div class=3D"message-content">=20
<p>This recipe is compatible with <strong>eZ Publish 5.2 / 2013.07</strong>=
</p>=20
</div>=20
</div>=20
<h1 id=3D"HowtoimplementaCustomTagforXMLTextFieldType-Customtags">Custom ta=
gs</h1>
<p><strong>XMLText fieldtype</strong> supports a limited number of tags in =
its internal eZXML format to render HTML5. However, it is possible to exten=
d the rendering by implementing <strong>custom tags</strong>.</p>
<p>As HTML5 rendering in eZ Publish is done through <a href=3D"http://en.wi=
kipedia.org/wiki/XSLT" class=3D"external-link" rel=3D"nofollow">XSLT</a>, y=
ou will need to create an XSL stylesheet to extend the rendering.</p>=20
<div class=3D"aui-message hint shadowed information-macro">=20
<p class=3D"title">Note on legacy custom tags</p>=20
<span class=3D"aui-icon icon-hint">Icon</span>=20
<div class=3D"message-content">=20
<p>To be able to edit a custom tag from admin interface, you'll still need =
to <a href=3D"http://doc.ez.no/eZ-Publish/Technical-manual/4.x/Reference/Da=
tatypes/XML-block/Custom-tags" class=3D"external-link" rel=3D"nofollow">reg=
ister your custom tag in the legacy kernel</a> (at least the configuration =
part, template not being mandatory for edition).</p>=20
</div>=20
</div>=20
<p><br /><style type=3D"text/css">/*<![CDATA[*/
div.rbtoc1413884666739 {padding: 0px;}
div.rbtoc1413884666739 ul {list-style: disc;margin-left: 0px;}
div.rbtoc1413884666739 li {margin-left: 0px;padding-left: 0px;}

/*]]>*/</style></p>
<div class=3D"toc-macro rbtoc1413884666739">=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#HowtoimplementaCustomTagforXMLTextFieldType-Customtags">Cus=
tom tags</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#HowtoimplementaCustomTagforXMLTextFieldType-Registeryourcus=
tomXSLstylesheet">Register your custom XSL stylesheet</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#HowtoimplementaCustomTagforXMLTextFieldType-Exampleofacusto=
mXSL">Example of a custom XSL</a></li>=20
</ul> </li>=20
<li><a href=3D"#HowtoimplementaCustomTagforXMLTextFieldType-UsingPre-conver=
ters">Using Pre-converters</a>=20
<ul class=3D"toc-indentation">=20
<li><a href=3D"#HowtoimplementaCustomTagforXMLTextFieldType-Registeringapre=
-converter">Registering a pre-converter</a></li>=20
</ul> </li>=20
<li><a href=3D"#HowtoimplementaCustomTagforXMLTextFieldType-Overridingexist=
ingXSLtemplates">Overriding existing XSL templates</a></li>=20
</ul> </li>=20
</ul>=20
</div>
<p></p>
<h2 id=3D"HowtoimplementaCustomTagforXMLTextFieldType-RegisteryourcustomXSL=
stylesheet">Register your custom XSL stylesheet</h2>
<p>To activate your custom tag rendering, you need to create an XSL stylesh=
eet and to register it properly:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>ezpublish.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">ezpublish:
    system:
        my_siteaccess:
            fieldtypes:
                ezxml:
                    custom_tags:
                        # Adding ezpublish/Resources/my_custom.xsl (priorit=
y defaults to 0).
                        - { path: %kernel.root_dir%/Resources/my_custom.xsl=
 }
                        # Adding src/Acme/TestBundle/Resources/another_cust=
om.xsl with priority 10.
                        - { path: %kernel.root_dir%/../src/Acme/TestBundle/=
Resources/another_custom.xsl, priority: 10 }</pre>=20
</div>
</div>
<p>Each entry under <code>custom_tags</code> is a hash having the following=
 properties:</p>
<div class=3D"table-wrap">
<table class=3D"confluenceTable">
<tbody>
<tr>
<th class=3D"confluenceTh"><code>path</code></th>
<th class=3D"nohighlight confluenceTh"><p><strong>Absolute path</strong> to=
 the XSL to import.</p>=20
<div class=3D"aui-message success shadowed information-macro">=20
<p class=3D"title">Tip</p>=20
<span class=3D"aui-icon icon-success">Icon</span>=20
<div class=3D"message-content">=20
<p><span style=3D"color: rgb(0,51,102);">Use </span><code>%kernel.root_dir%=
</code><span style=3D"color: rgb(0,51,102);"> parameter to start from </spa=
n><code>ezpublish/</code><span style=3D"color: rgb(0,51,102);"> folder.</sp=
an></p>=20
</div>=20
</div> <p>&nbsp;</p></th>
</tr>
<tr>
<td class=3D"highlight confluenceTd"><code><strong>priority</strong></code>=
</td>
<td class=3D"confluenceTd"><p>Priority of your stylesheet in the sequence o=
f importing. The higher it is, the higher precedence it will have.</p>=20
<div class=3D"aui-message hint shadowed information-macro">=20
<span class=3D"aui-icon icon-hint">Icon</span>=20
<div class=3D"message-content">=20
<p>In XSL imports, in case of template overrides, the last imported XSL alw=
ays wins. Hence custom XSL are loaded in reverse priority order.</p>=20
</div>=20
</div> </td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"HowtoimplementaCustomTagforXMLTextFieldType-ExampleofacustomXSL">=
Example of a custom XSL</h3>
<p>The following example shows how to render the <a href=3D"https://github.=
com/lolautruche/jvEmbedTag/blob/master/design/standard/templates/content/da=
tatype/view/ezxmltags/youtube.tpl" class=3D"external-link" rel=3D"nofollow"=
>YouTube embed custom tag from jvEmbed legacy extension</a> (see also <a hr=
ef=3D"https://github.com/lolautruche/jvEmbedTag/blob/master/settings/conten=
t.ini.append.php" class=3D"external-link" rel=3D"nofollow">related legacy c=
onfiguration for content</a>).</p>
<p>Note that all selected attributes are in <code>custom</code> namespace (=
this is the case for all custom tags attributes in internal eZXML).</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>youtube.xsl</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: html/xml; gutter: false" style=3D"font=
-size:12px;">&lt;?xml version=3D&quot;1.0&quot; encoding=3D&quot;UTF-8&quot=
;?&gt;
&lt;xsl:stylesheet
        version=3D&quot;1.0&quot;
        xmlns:xsl=3D&quot;http://www.w3.org/1999/XSL/Transform&quot;
        xmlns:xhtml=3D&quot;http://ez.no/namespaces/ezpublish3/xhtml/&quot;
        xmlns:custom=3D&quot;http://ez.no/namespaces/ezpublish3/custom/&quo=
t;
        xmlns:image=3D&quot;http://ez.no/namespaces/ezpublish3/image/&quot;
        exclude-result-prefixes=3D&quot;xhtml custom image&quot;&gt;

    &lt;xsl:output method=3D&quot;html&quot; indent=3D&quot;yes&quot; encod=
ing=3D&quot;UTF-8&quot;/&gt;
&nbsp;
    &lt;!-- Template below will match the following custom tag: --&gt;
    &lt;!-- &lt;custom name=3D&quot;youtube&quot; custom:video=3D&quot;//ww=
w.youtube.com/embed/MfOnq-zXXBw&quot; custom:videoWidth=3D&quot;640&quot; c=
ustom:videoHeight=3D&quot;380&quot;/&gt; --&gt;
    &lt;xsl:template match=3D&quot;custom[@name=3D'youtube']&quot;&gt;
        &lt;div class=3D&quot;jvembed jvembed-youtube&quot;&gt;
            &lt;iframe&gt;
                &lt;xsl:attribute name=3D&quot;width&quot;&gt;&lt;xsl:value=
-of select=3D&quot;@custom:videoWidth&quot;/&gt;&lt;/xsl:attribute&gt;
                &lt;xsl:attribute name=3D&quot;height&quot;&gt;&lt;xsl:valu=
e-of select=3D&quot;@custom:videoHeight&quot;/&gt;&lt;/xsl:attribute&gt;
                &lt;xsl:attribute name=3D&quot;src&quot;&gt;&lt;xsl:value-o=
f select=3D&quot;@custom:video&quot;/&gt;&lt;/xsl:attribute&gt;
                &lt;xsl:attribute name=3D&quot;frameborder&quot;&gt;0&lt;/x=
sl:attribute&gt;
                &lt;xsl:attribute name=3D&quot;allowfullscreen&quot;/&gt;
            &lt;/iframe&gt;
        &lt;/div&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre>=20
</div>
</div>=20
<div class=3D"aui-message success shadowed information-macro">=20
<p class=3D"title">Tip</p>=20
<span class=3D"aui-icon icon-success">Icon</span>=20
<div class=3D"message-content">=20
<p>PHP functions are registered in the XSLTProcessor, so you can use PHP fu=
nctions and static method calls to enhance the XSLT process (using <code>ph=
p-function</code> and <code>php-functionString</code> XSLT functions).</p>
<p><strong>However, consider using those for <u>simple use cases</u></stron=
g>. For more complex cases, you'll need to register pre-converters instead.=
</p>=20
</div>=20
</div>=20
<h2 id=3D"HowtoimplementaCustomTagforXMLTextFieldType-UsingPre-converters">=
Using Pre-converters</h2>
<p>Pre-converters are services that pre-process the internal XML before the=
 XSLT rendering occurs. It can be useful if you need to manipulate the data=
 stored in eZXML.</p>
<p>An example of use is <a href=3D"https://github.com/ezsystems/ezpublish-k=
ernel/blob/master/eZ/Publish/Core/FieldType/XmlText/Converter/EzLinkToHtml5=
.php" class=3D"external-link" rel=3D"nofollow">what is done for internal li=
nks</a>. Indeed, internal location or content are linked by their <a href=
=3D"https://github.com/ezsystems/ezpublish-kernel/blob/master/eZ/Publish/Co=
re/FieldType/XmlText/Converter/EzLinkToHtml5.php" class=3D"external-link" r=
el=3D"nofollow">locationId/contentId which need to be transformed in a usab=
le URI</a>.</p>
<p>Pre-converters receive the whole DOMDocument object for the current fiel=
d. So you can easily do XPath queries and do some DOM manipulation against =
it.</p>
<h3 id=3D"HowtoimplementaCustomTagforXMLTextFieldType-Registeringapre-conve=
rter">Registering a pre-converter</h3>
<p>All pre-converters need to:</p>
<ul>
<li>Implement&nbsp;<span><a rel=3D"nofollow"><code>eZ\Publish\Core\FieldTyp=
e\XmlText\Converter</code></a> interface.</span></li>
<li><span>Be registered as a service, with&nbsp;<code>ezpublish.ezxml.conve=
rter</code> tag.</span></li>
</ul>
<div>
<p>&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>services.yml in a bundle</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">parameters:
    my.ezxml.pre_converter.class: Acme\TestBundle\XmlText\MyPreConverter
&nbsp;
services:
    my.ezxml.pre_converter:
        class: %my.ezxml.pre_converter.class%
        arguments: [@someDependency, @someOtherDependency]
        tags:
            - { name: ezpublish.ezxml.converter }</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>MyPreConverter</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">&lt;?php

namespace Acme\TextBundle\XmlText;

use eZ\Publish\Core\FieldType\XmlText\Converter;
use DOMDocument;

class MyPreConverter implements Converter
{
    public function __construct( $someDependency, $someOtherDependency )
    {
        // ...
    }

    /**
     * Does a partial conversion work on $xmlDoc.
     *
     * @param \DOMDocument $xmlDoc
     *
     * @return null
     */
    public function convert( DOMDocument $xmlDoc )
    {
        // Do something on $xmlDoc
        // You can for example walk through the DOM, do XPath queries, add/=
modify attributes...
    }
}

</pre>=20
</div>
</div>
<h2 id=3D"HowtoimplementaCustomTagforXMLTextFieldType-OverridingexistingXSL=
templates">Overriding existing XSL templates</h2>
<p>As XSL stylesheets apply for the whole resulted DOM, you can of course o=
verride existing templates. This is where the <code>priority</code> propert=
y in configuration takes its sense.</p>=20
<div class=3D"aui-message hint shadowed information-macro">=20
<span class=3D"aui-icon icon-hint">Icon</span>=20
<div class=3D"message-content">=20
<p>Built-in XSL templates have <strong>0</strong> as priority</p>=20
</div>=20
</div>=20
<p>&nbsp;</p>
<p>Consider the following example to switch from usage of <code>&lt;b&gt;</=
code> to <code>&lt;strong&gt;</code>:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>strong.xsl</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: html/xml; gutter: false" style=3D"font=
-size:12px;">&lt;?xml version=3D&quot;1.0&quot; encoding=3D&quot;UTF-8&quot=
;?&gt;
&lt;xsl:stylesheet
        version=3D&quot;1.0&quot;
        xmlns:xsl=3D&quot;http://www.w3.org/1999/XSL/Transform&quot;
        xmlns:xhtml=3D&quot;http://ez.no/namespaces/ezpublish3/xhtml/&quot;
        xmlns:custom=3D&quot;http://ez.no/namespaces/ezpublish3/custom/&quo=
t;
        xmlns:image=3D&quot;http://ez.no/namespaces/ezpublish3/image/&quot;
        exclude-result-prefixes=3D&quot;xhtml custom image&quot;&gt;
&nbsp;
    &lt;!-- Original template transforms into &lt;b&gt; --&gt;
    &lt;xsl:template match=3D&quot;strong&quot;&gt;
        &lt;strong&gt;
            &lt;xsl:copy-of select=3D&quot;@*&quot;/&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/strong&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>ezpublish.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">ezpublish:
    system:
        my_siteaccess:
            fieldtypes:
                ezxml:
                    custom_tags:
                        # Adding a higher priority to ensure built-in templ=
ate will be overriden.
                        - { path: %kernel.root_dir%/Resources/strong.xsl, p=
riority: 10 }</pre>=20
</div>
</div>
</div>
    </div>
</body>
</html>
------=_Part_987_1587231841.1413884666772--
