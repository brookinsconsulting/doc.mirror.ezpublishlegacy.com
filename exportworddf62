Message-ID: <631141037.1242.1413891638634.JavaMail.confluence@ip-10-127-227-192>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_1241_1298468493.1413891638634"

------=_Part_1241_1298468493.1413891638634
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Using Varnish</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

#main {
    padding-bottom: 1em !important; /* The default padding of 6em is too mu=
ch for printouts */
}

body {
    font-family: Arial, Helvetica, FreeSans, sans-serif;
    font-size: 10pt;
    line-height: 1.2;
}

body, #full-height-container, #main, #page, #content, .has-personal-sidebar=
 #content {
    background: #fff    !important;
    color: #000         !important;
    border: 0           !important;
    width: 100%         !important;
    height: auto        !important;
    min-height: auto    !important;
    margin: 0           !important;
    padding: 0          !important;
    display: block      !important;
}

a, a:link, a:visited, a:focus, a:hover, a:active {
    color: #000;
}
#content h1,
#content h2,
#content h3,
#content h4,
#content h5,
#content h6 {
    font-family: Arial, Helvetica, FreeSans, sans-serif;
    page-break-after: avoid;
}
pre {
    font-family: Monaco, "Courier New", monospace;
}

#header,
.aui-header-inner,
#navigation,
#sidebar,
.sidebar,
#personal-info-sidebar,
.ia-fixed-sidebar,
.page-actions,
.navmenu,
.ajs-menu-bar,
.noprint,
.inline-control-link,
.inline-control-link a,
a.show-labels-editor,
.global-comment-actions,
.comment-actions,
.quick-comment-container,
#addcomment {
    display: none !important;
}

.comment .date::before {
    content: none !important; /* remove middot for print view */
}

h1.pagetitle img {
    height: auto;
    width: auto;
}

.print-only {
    display: block;
}
#footer {
    position: relative !important; /* CONF-17506 Place the footer at end of=
 the content */
    margin: 0;
    padding: 0;
    background: none;
    clear: both;
}

#poweredby {
    border-top: none;
    background: none;
}

#poweredby li.print-only {
    display: list-item;
    font-style: italic;
}

#poweredby li.noprint {
    display:none;
}


/* no width controls in print */
.wiki-content .table-wrap,
.wiki-content p,
.panel .codeContent,
.panel .codeContent pre,
.image-wrap {
    overflow: visible !important;
}

/* TODO - should this work? */
#children-section,
#comments-section .comment,
#comments-section .comment .comment-body,
#comments-section .comment .comment-content,
#comments-section .comment p {
    page-break-inside: avoid;
}

#page-children a {
    text-decoration: none;
}

/**
 hide twixies

 the specificity here is a hack because print styles
 are getting loaded before the base styles. */
#comments-section.pageSection .section-header,
#comments-section.pageSection .section-title,
#children-section.pageSection .section-header,
#children-section.pageSection .section-title,
.children-show-hide {
    padding-left: 0;
    margin-left: 0;
}

.children-show-hide.icon {
    display: none;
}

/* personal sidebar */
.has-personal-sidebar #content {
    margin-right: 0px;
}

.has-personal-sidebar #content .pageSection {
    margin-right: 0px;
}
-->
    </style>
</head>
<body>
    <h1>Using Varnish</h1>
    <div class=3D"Section1">
        <p>eZ Publish 5 being built on top of Symfony 2, it uses standard H=
TTP cache headers. By default the Symfony 2 reverse proxy, written in PHP, =
is used to handle cache, but it can be easily replaced with any other rever=
se proxy like Varnish.</p>
<h2 id=3D"UsingVarnish-ConfigureVarnish">Configure Varnish</h2>=20
<div class=3D"aui-message warning shadowed information-macro">=20
<span class=3D"aui-icon icon-warning">Icon</span>=20
<div class=3D"message-content">=20
<p>Provided VCL example is given for Varnish 3.x only</p>=20
</div>=20
</div>=20
<p>The first thing is to configure Varnish to advertise ESI usage and to ac=
tivate cache invalidation:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>ezpublish5.vcl</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;"># Varnish 3.x - eZ Publish 5 - Complete VCL
&nbsp;
# Our Backend - We assume that eZ Publish Web server listen on port 80
backend ezpublish {
    .host =3D &quot;127.0.0.1&quot;;
    .port =3D &quot;80&quot;;
}
=20
# ACL for purgers IP.
# Provide here IP addresses that are allowed to send PURGE requests.
# PURGE requests will be sent by the backend.
acl purgers {
    &quot;127.0.0.1&quot;;
    &quot;192.168.0.0&quot;/16;
}
=20
# Called at the beginning of a request, after the complete request has been=
 received
sub vcl_recv {
=20
    # Set the backend
    set req.backend =3D ezpublish;
=20
    # Advertise Symfony for ESI support
    set req.http.Surrogate-Capability =3D &quot;abc=3DESI/1.0&quot;;
=20
    # Add a unique header containing the client address (only for master re=
quest)
    # Please note that /_fragment URI can change in Symfony configuration
    if (!req.url ~ &quot;^/_fragment&quot;) {
        if (req.http.x-forwarded-for) {
            set req.http.X-Forwarded-For =3D req.http.X-Forwarded-For + &qu=
ot;, &quot; + client.ip;
        } else {
            set req.http.X-Forwarded-For =3D client.ip;
        }
    }
=20
    # Handle purge
    # Only works with &quot;multiple_http&quot; purge method
    if (req.request =3D=3D &quot;PURGE&quot;) {
        if (!client.ip ~ purgers) {
            error 405 &quot;Method not allowed&quot;;
        }
&nbsp;
        if ( req.http.X-Location-Id =3D=3D &quot;*&quot; ) {
            # Purge all locations
            ban( &quot;obj.http.X-Location-Id ~ ^[0-9]+$&quot; );
            error 200 &quot;Purge all locations done.&quot;;
        } elseif ( req.http.X-Location-Id ) {
            # Purge location by its locationId
            ban( &quot;obj.http.X-Location-Id =3D=3D &quot; + req.http.X-Lo=
cation-Id );
            error 200 &quot;Purge of content connected to the location id(&=
quot; + req.http.X-Location-Id + &quot;) done.&quot;;
        }
    }
=20
    # Normalize the Accept-Encoding headers
    if (req.http.Accept-Encoding) {
        if (req.http.Accept-Encoding ~ &quot;gzip&quot;) {
            set req.http.Accept-Encoding =3D &quot;gzip&quot;;
        } elsif (req.http.Accept-Encoding ~ &quot;deflate&quot;) {
            set req.http.Accept-Encoding =3D &quot;deflate&quot;;
        } else {
            unset req.http.Accept-Encoding;
        }
    }
=20
    # Don't cache Authenticate &amp; Authorization
    if (req.http.Authenticate || req.http.Authorization) {
        return(pass);
    }
&nbsp;
    # Don't cache requests other than GET and HEAD.
    if (req.request !=3D &quot;GET&quot; &amp;&amp; req.request !=3D &quot;=
HEAD&quot;) {
        return (pass);
    }
=20
    # Don't cache authenticated sessions
    if (req.http.Cookie &amp;&amp; req.http.Cookie ~ &quot;is_logged_in=3D&=
quot; ) {
        return(pass);
    }
=20
    # If it passes all these tests, do a lookup anyway;
    return (lookup);
}
=20
# Called when the requested object has been retrieved from the backend
sub vcl_fetch {
=20
    # Optimize to only parse the Response contents from Symfony
    if (beresp.http.Surrogate-Control ~ &quot;ESI/1.0&quot;) {
        unset beresp.http.Surrogate-Control;
        set beresp.do_esi =3D true;
    }
=20
    # Don't cache response with Set-Cookie
    if ( beresp.http.Set-Cookie ) {
        set beresp.ttl =3D 0s;
        return (hit_for_pass);
    }
=20
    # Respect the Cache-Control=3Dprivate header from the backend
    if (beresp.http.Cache-Control ~ &quot;private&quot;) {
        set beresp.ttl =3D 0s;
        return (hit_for_pass);
    }
=20
    return (deliver);
}

</pre>=20
</div>
</div>
<p>You can of course add additional rules if you need.</p>
<h2 id=3D"UsingVarnish-ConfigureeZPublish">Configure eZ Publish</h2>
<h3 id=3D"UsingVarnish-Updateyourfrontcontroller">Update your front control=
ler</h3>
<p>By default your front controller (<code>index.php</code>) uses the built=
-in reverse proxy, <code>EzPublishCache</code>. In order to use Varnish, yo=
u need to deactivate it by commenting the line where <code>EzPublishCache</=
code> is instantiated:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">&lt;?php
// ...
require_once __DIR__ . '/../ezpublish/EzPublishKernel.php';
require_once __DIR__ . '/../ezpublish/EzPublishCache.php';
$kernel =3D new EzPublishKernel( 'prod', false );
$kernel-&gt;loadClassCache();
// Comment the following line if you use an external reverse proxy (e.g. Va=
rnish)
// $kernel =3D new EzPublishCache( $kernel );
$request =3D Request::createFromGlobals();
// Uncomment the following if your application is behind a reverse proxy yo=
u manage and trust.
// (see http://fabien.potencier.org/article/51/create-your-own-framework-on=
-top-of-the-symfony2-components-part-2)
//Request::trustProxyData();
$response =3D $kernel-&gt;handle( $request );
$response-&gt;send();
$kernel-&gt;terminate( $request, $response );</pre>=20
</div>
</div>
<p>&nbsp;</p>
<h3 id=3D"UsingVarnish-UpdateYMLconfiguration">Update YML configuration</h3=
>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>ezpublish.yml</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"theme: Eclipse; brush: php; gutter: false" style=3D"font-size=
:12px;">ezpublish:
    http_cache:
        # Use multiple_http method for purging content
        purge_type: multiple_http
&nbsp;
    system:
        # Assuming that my_siteaccess_group your frontend AND backend sitea=
ccesses
        my_siteaccess_group:
            http_cache:
                # Fill in your Varnish server(s) address(es).
                purge_servers: [http://my.varnish.server:6081]</pre>=20
</div>
</div>
<p>Et voil&agrave;&nbsp;!</p>
    </div>
</body>
</html>
------=_Part_1241_1298468493.1413891638634--
